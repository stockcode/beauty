buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.13.+'
    }
}

apply plugin: 'android'

repositories {
    mavenLocal()
    mavenCentral()
    flatDir {
        dirs 'aars'
    }
}

dependencies {
    compile 'com.google.android:support-v4:r13'
    compile 'de.greenrobot:greendao:1.3.1'
    compile 'com.github.rtyley:roboguice-sherlock:1.5'
    compile 'com.octo.android.robospice:robospice:1.4.11'
    compile 'com.octo.android.robospice:robospice-spring-android:1.4.11'
    compile 'com.loopj.android:android-async-http:1.4.5'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.2.2'
    //compile  'com.github.chrisbanes.photoview:library:1.2.1'
    compile 'com.baidu.android:mobstat:3.1'
    compile 'com.baidu.android:pushservice:4.0.0'
    compile 'ch.acra:acra:4.5.0'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.1'

    compile 'de.hdodenhof:circleimageview:1.2.1'
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    //compile 'me.maxwin.view:OneXListview:1.0.0'
    //compile 'com.origamilabs.library:staggeredgridview:1.0.0'
    //compile 'org.lucasr.smoothie:library:0.1'
    compile 'org.apache.httpcomponents:httpmime:4.2.5'
    compile 'com.alipay:alipay:1.2'
    compile 'com.alipay:alipay_lib:1.2@aar'
    compile 'com.tencent:opensdk:2.6'
    compile 'com.tencent:mtasdk:2.0.0'
    compile 'com.tencent:midsdk:2.1.0'
    compile 'com.tencent:mmsdk:1.0.0'
    compile 'com.github.castorflex.smoothprogressbar:library:1.0.0'

    compile fileTree(dir: 'libs', include: '*.jar')
    compile(name:'SMSSDK-1.0.0', ext:'aar')
}


tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }
tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}


task copyNativeLibs(type: Copy) {
        println 'call copyNativeLibs'
        from fileTree(dir: 'libs', exclude: '**/*.jar' )
        into 'build/native-libs'
    }


android {
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
    }

    defaultConfig {
//        minSdkVersion 7
//        targetSdkVersion 16
        versionCode 15
        versionName '1.1.15'
    }

    compileSdkVersion 17
    buildToolsVersion '19.1.0'

    project.archivesBaseName = "beauty";

    signingConfigs {
        release{
            storeFile file("nit.keystore")
            storePassword "790624"
            keyAlias "mykey"
            keyPassword "790624"
        }
    }



    buildTypes {
        debug {
        }
        release {
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->

                def file = variant.outputFile
                variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionCode + "-" + defaultConfig.versionName + ".apk"))
            }
        }
    }


    productFlavors {
        mm {
            applicationId 'cn.nit.beauty'
        }
    }

    lintOptions {
        abortOnError false
    }
}

configurations {
    ftpAntTask
}

dependencies {
    ftpAntTask("org.apache.ant:ant-commons-net:1.8.4") {
        module("commons-net:commons-net:1.4.1") {
            dependencies "oro:oro:2.0.8:jar"
        }
    }
}

task ftp << {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
        ftp(server: "ftp.apache.org", userid: "anonymous", password: "me@myorg.com") {
            fileset(dir: "htdocs/manual")
        }
    }
}

