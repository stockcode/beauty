package cn.nit.beauty.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATEGORY.
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "CATEGORY";

    public CategoryDao(DaoConfig config) {
        super(config);
    }


    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATEGORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CATEGORY' TEXT NOT NULL ," + // 1: CATEGORY
                "'CATEGORY__ICON' INTEGER," + // 2: CATEGORY_ICON
                "'ICON' INTEGER," + // 3: ICON
                "'TITLE' TEXT NOT NULL ," + // 4: TITLE
                "'URL' TEXT," + // 5: URL
                "'CHOICE' INTEGER);"); // 6: CHOICE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCATEGORY());

        Integer CATEGORY_ICON = entity.getCATEGORY_ICON();
        if (CATEGORY_ICON != null) {
            stmt.bindLong(3, CATEGORY_ICON);
        }

        Integer ICON = entity.getICON();
        if (ICON != null) {
            stmt.bindLong(4, ICON);
        }
        stmt.bindString(5, entity.getTITLE());

        String URL = entity.getURL();
        if (URL != null) {
            stmt.bindString(6, URL);
        }

        Boolean CHOICE = entity.getCHOICE();
        if (CHOICE != null) {
            stmt.bindLong(7, CHOICE ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CATEGORY
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // CATEGORY_ICON
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ICON
            cursor.getString(offset + 4), // TITLE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // URL
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // CHOICE
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCATEGORY(cursor.getString(offset + 1));
        entity.setCATEGORY_ICON(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setICON(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTITLE(cursor.getString(offset + 4));
        entity.setURL(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCHOICE(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CATEGORY = new Property(1, String.class, "CATEGORY", false, "CATEGORY");
        public final static Property CATEGORY_ICON = new Property(2, Integer.class, "CATEGORY_ICON", false, "CATEGORY__ICON");
        public final static Property ICON = new Property(3, Integer.class, "ICON", false, "ICON");
        public final static Property TITLE = new Property(4, String.class, "TITLE", false, "TITLE");
        public final static Property URL = new Property(5, String.class, "URL", false, "URL");
        public final static Property CHOICE = new Property(6, Boolean.class, "CHOICE", false, "CHOICE");
    }
    
}
